/**
 * 漏洞扫描系统演示运行器
 * 演示SAST、DAST、依赖项扫描功能
 */

const fs = require('fs');
const { VulnerabilityScanner } = require('./vulnerability-scanner.cjs');

/**
 * 漏洞扫描演示
 */
class VulnerabilityScanDemo {
  constructor() {
    this.scanner = null;
  }

  /**
   * 运行完整演示
   */
  async runDemo() {
    console.log('🔍 漏洞扫描系统演示');
    console.log('=' .repeat(50));
    console.log();

    try {
      // 1. 初始化扫描器
      await this.initializeScanner();
      
      // 2. 执行综合扫描
      const results = await this.performComprehensiveScan();
      
      // 3. 分析扫描结果
      await this.analyzeResults(results);
      
      // 4. 生成详细报告
      await this.generateDetailedReport(results);
      
      // 5. 提供修复建议
      await this.provideFixes(results);
      
      console.log('\n✅ 漏洞扫描系统演示完成!');
      
    } catch (error) {
      console.error('❌ 演示过程中发生错误:', error.message);
      throw error;
    }
  }

  /**
   * 初始化扫描器
   */
  async initializeScanner() {
    console.log('🔧 1. 初始化漏洞扫描器...');
    
    const scannerConfig = {
      sast: {
        scanPaths: ['./src', './public', './'],
        excludePaths: ['node_modules', '.git', 'dist', 'build'],
        fileExtensions: ['.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.json']
      },
      dependency: {
        checkNpmAudit: true,
        packageFiles: ['package.json', 'package-lock.json']
      },
      dast: {
        targetUrls: ['http://localhost:3000'],
        maxDepth: 3
      },
      enableSAST: true,
      enableDependencyScanning: true,
      enableDAST: true
    };

    this.scanner = new VulnerabilityScanner(scannerConfig);
    
    console.log('✅ 扫描器初始化完成');
    console.log('   - SAST (静态应用安全测试): 启用');
    console.log('   - 依赖项扫描: 启用');
    console.log('   - DAST (动态应用安全测试): 启用');
    console.log();
  }

  /**
   * 执行综合扫描
   */
  async performComprehensiveScan() {
    console.log('🔍 2. 执行综合漏洞扫描...');
    
    const startTime = Date.now();
    const results = await this.scanner.performComprehensiveScan();
    const duration = Date.now() - startTime;
    
    console.log(`\n⏱️ 扫描完成，耗时: ${(duration / 1000).toFixed(2)}秒`);
    console.log(`📊 扫描类型: ${results.scanTypes.join(', ')}`);
    console.log(`🔍 发现漏洞总数: ${results.totalVulnerabilities}`);
    
    return results;
  }

  /**
   * 分析扫描结果
   */
  async analyzeResults(results) {
    console.log('\n📊 3. 分析扫描结果...');
    
    // 显示漏洞统计
    console.log('🎯 漏洞严重程度分布:');
    console.log(`   🔴 严重 (Critical): ${results.summary.critical}`);
    console.log(`   🟠 高危 (High): ${results.summary.high}`);
    console.log(`   🟡 中危 (Medium): ${results.summary.medium}`);
    console.log(`   🟢 低危 (Low): ${results.summary.low}`);
    console.log(`   ℹ️ 信息 (Info): ${results.summary.info}`);
    
    // 显示安全评分
    console.log(`\n🏆 安全评分: ${results.securityScore}/100`);
    
    let riskLevel = '低风险';
    let riskColor = '🟢';
    
    if (results.summary.critical > 0) {
      riskLevel = '严重风险';
      riskColor = '🔴';
    } else if (results.summary.high > 3) {
      riskLevel = '高风险';
      riskColor = '🟠';
    } else if (results.summary.medium > 5) {
      riskLevel = '中等风险';
      riskColor = '🟡';
    }
    
    console.log(`${riskColor} 风险等级: ${riskLevel}`);
    
    // 分析各扫描类型结果
    if (results.scans.sast) {
      console.log(`\n📝 SAST扫描结果:`);
      console.log(`   - 扫描文件数: ${results.scans.sast.scannedFiles}`);
      console.log(`   - 发现问题: ${results.scans.sast.vulnerabilities.length}个`);
      
      if (results.scans.sast.vulnerabilities.length > 0) {
        const topVulns = results.scans.sast.vulnerabilities
          .slice(0, 3)
          .map(v => `${v.type} (${v.severity})`);
        console.log(`   - 主要问题: ${topVulns.join(', ')}`);
      }
    }
    
    if (results.scans.dependency) {
      console.log(`\n📦 依赖项扫描结果:`);
      console.log(`   - 总依赖数: ${results.scans.dependency.dependencies.total || 0}`);
      console.log(`   - 生产依赖: ${results.scans.dependency.dependencies.production?.length || 0}`);
      console.log(`   - 开发依赖: ${results.scans.dependency.dependencies.development?.length || 0}`);
      console.log(`   - 发现漏洞: ${results.scans.dependency.vulnerabilities.length}个`);
    }
    
    if (results.scans.dast) {
      console.log(`\n🌐 DAST扫描结果:`);
      console.log(`   - 扫描URL数: ${results.scans.dast.scannedUrls.length}`);
      console.log(`   - 发现问题: ${results.scans.dast.vulnerabilities.length}个`);
    }
  }

  /**
   * 生成详细报告
   */
  async generateDetailedReport(results) {
    console.log('\n📄 4. 生成详细扫描报告...');
    
    const report = this.scanner.generateReport(results);
    
    // 添加详细的漏洞信息
    const detailedReport = {
      ...report,
      detailedVulnerabilities: this.categorizeVulnerabilities(results),
      scanConfiguration: {
        sastEnabled: results.scanTypes.includes('SAST'),
        dependencyEnabled: results.scanTypes.includes('Dependency'),
        dastEnabled: results.scanTypes.includes('DAST')
      },
      complianceStatus: this.checkCompliance(results),
      trendAnalysis: this.generateTrendAnalysis(results)
    };
    
    // 保存报告
    const reportPath = 'VULNERABILITY_SCAN_REPORT.json';
    fs.writeFileSync(reportPath, JSON.stringify(detailedReport, null, 2));
    
    console.log(`📁 详细报告已保存至: ${reportPath}`);
    console.log(`📊 报告包含:`);
    console.log(`   - 漏洞详细信息和分类`);
    console.log(`   - 修复建议和优先级`);
    console.log(`   - 合规性检查结果`);
    console.log(`   - 安全趋势分析`);
    console.log(`   - 下次扫描建议时间: ${new Date(report.nextScanRecommended).toLocaleDateString()}`);
  }

  /**
   * 分类漏洞
   */
  categorizeVulnerabilities(results) {
    const categories = {
      codeQuality: [],
      security: [],
      dependencies: [],
      configuration: [],
      compliance: []
    };

    // 处理SAST结果
    if (results.scans.sast) {
      results.scans.sast.vulnerabilities.forEach(vuln => {
        switch (vuln.type) {
          case 'code-injection':
          case 'xss':
          case 'sql-injection':
            categories.security.push(vuln);
            break;
          case 'hardcoded-secrets':
          case 'sensitive-data-exposure':
            categories.configuration.push(vuln);
            break;
          default:
            categories.codeQuality.push(vuln);
        }
      });
    }

    // 处理依赖项结果
    if (results.scans.dependency) {
      results.scans.dependency.vulnerabilities.forEach(vuln => {
        categories.dependencies.push(vuln);
      });
    }

    // 处理DAST结果
    if (results.scans.dast) {
      results.scans.dast.vulnerabilities.forEach(vuln => {
        categories.security.push(vuln);
      });
    }

    return categories;
  }

  /**
   * 检查合规性
   */
  checkCompliance(results) {
    const compliance = {
      owasp: {
        score: 0,
        issues: [],
        recommendations: []
      },
      gdpr: {
        score: 0,
        issues: [],
        recommendations: []
      },
      pci: {
        score: 0,
        issues: [],
        recommendations: []
      }
    };

    // OWASP Top 10 检查
    const owaspIssues = [];
    if (results.summary.critical > 0) {
      owaspIssues.push('存在严重安全漏洞');
    }
    if (results.scans.sast?.vulnerabilities.some(v => v.type === 'xss')) {
      owaspIssues.push('存在XSS漏洞风险');
    }
    if (results.scans.sast?.vulnerabilities.some(v => v.type === 'sql-injection')) {
      owaspIssues.push('存在SQL注入风险');
    }

    compliance.owasp.issues = owaspIssues;
    compliance.owasp.score = Math.max(0, 100 - owaspIssues.length * 20);

    // GDPR 数据保护检查
    const gdprIssues = [];
    if (results.scans.sast?.vulnerabilities.some(v => v.type === 'hardcoded-secrets')) {
      gdprIssues.push('存在硬编码敏感信息');
    }
    if (results.scans.sast?.vulnerabilities.some(v => v.type === 'sensitive-data-exposure')) {
      gdprIssues.push('存在敏感数据泄露风险');
    }

    compliance.gdpr.issues = gdprIssues;
    compliance.gdpr.score = Math.max(0, 100 - gdprIssues.length * 25);

    return compliance;
  }

  /**
   * 生成趋势分析
   */
  generateTrendAnalysis(results) {
    return {
      securityTrend: results.securityScore >= 80 ? 'improving' : 'needs_attention',
      vulnerabilityTrend: results.totalVulnerabilities <= 5 ? 'stable' : 'increasing',
      riskTrend: results.summary.critical === 0 ? 'decreasing' : 'critical',
      recommendations: [
        '建议每周进行一次漏洞扫描',
        '优先修复严重和高危漏洞',
        '建立漏洞管理流程',
        '定期更新依赖项'
      ]
    };
  }

  /**
   * 提供修复建议
   */
  async provideFixes(results) {
    console.log('\n🔧 5. 修复建议和最佳实践...');
    
    if (results.recommendations.length > 0) {
      console.log('💡 优先修复建议:');
      results.recommendations.forEach((rec, index) => {
        const priorityIcon = rec.priority === 'critical' ? '🔴' : 
                           rec.priority === 'high' ? '🟠' : 
                           rec.priority === 'medium' ? '🟡' : '🟢';
        console.log(`   ${index + 1}. ${priorityIcon} ${rec.message}`);
        console.log(`      ➤ ${rec.action}`);
      });
    }

    console.log('\n🛡️ 安全最佳实践:');
    console.log('   1. 🔒 实施安全编码标准');
    console.log('   2. 📦 定期更新依赖项');
    console.log('   3. 🔍 集成安全扫描到CI/CD流水线');
    console.log('   4. 🎯 建立漏洞响应流程');
    console.log('   5. 📚 进行安全培训');
    console.log('   6. 🔐 使用安全配置管理');
    console.log('   7. 📊 定期进行安全审计');

    console.log('\n🚀 自动化建议:');
    console.log('   - 在CI/CD中集成漏洞扫描');
    console.log('   - 设置漏洞告警通知');
    console.log('   - 建立自动依赖项更新');
    console.log('   - 实施安全门禁策略');

    // 生成修复脚本示例
    this.generateFixScripts(results);
  }

  /**
   * 生成修复脚本示例
   */
  generateFixScripts(results) {
    const fixScripts = {
      packageJsonFix: this.generatePackageJsonFix(results),
      securityHeadersFix: this.generateSecurityHeadersFix(results),
      cspFix: this.generateCSPFix(results)
    };

    console.log('\n📝 自动修复脚本已生成:');
    console.log('   - package.json 安全更新脚本');
    console.log('   - 安全头配置脚本');
    console.log('   - CSP策略配置脚本');

    // 保存修复脚本
    fs.writeFileSync('../../config/security/security-fixes.json', JSON.stringify(fixScripts, null, 2));
        console.log('   📁 修复脚本已保存至: ../../config/security/security-fixes.json');
  }

  /**
   * 生成package.json修复脚本
   */
  generatePackageJsonFix(results) {
    const fixes = [];
    
    if (results.scans.dependency?.vulnerabilities.length > 0) {
      fixes.push({
        action: 'update-dependencies',
        command: 'npm audit fix',
        description: '自动修复已知漏洞'
      });
      
      fixes.push({
        action: 'update-packages',
        command: 'npm update',
        description: '更新所有包到最新版本'
      });
    }

    return fixes;
  }

  /**
   * 生成安全头修复脚本
   */
  generateSecurityHeadersFix(results) {
    const fixes = [];
    
    if (results.scans.dast?.vulnerabilities.some(v => v.type === 'missing-security-header')) {
      fixes.push({
        action: 'add-security-headers',
        middleware: 'helmet',
        description: '添加基础安全头'
      });
    }

    return fixes;
  }

  /**
   * 生成CSP修复脚本
   */
  generateCSPFix(results) {
    const fixes = [];
    
    if (results.scans.sast?.vulnerabilities.some(v => v.type === 'inline-script')) {
      fixes.push({
        action: 'implement-csp',
        policy: "default-src 'self'; script-src 'self' 'nonce-{nonce}'",
        description: '实施内容安全策略'
      });
    }

    return fixes;
  }

  /**
   * 演示CI/CD集成
   */
  demonstrateCIIntegration() {
    console.log('\n🔄 CI/CD 集成示例:');
    console.log(`
# GitHub Actions 工作流示例
name: Security Scan
on: [push, pull_request]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm ci
      - name: Run vulnerability scan
        run: node run-vulnerability-scan.cjs
      - name: Upload scan results
        uses: actions/upload-artifact@v2
        with:
          name: security-scan-results
          path: VULNERABILITY_SCAN_REPORT.json
    `);
  }
}

/**
 * 运行演示
 */
async function runVulnerabilityScanDemo() {
  const demo = new VulnerabilityScanDemo();
  
  try {
    await demo.runDemo();
    demo.demonstrateCIIntegration();
    
    console.log('\n🎉 漏洞扫描系统演示成功完成!');
    console.log('📋 主要功能:');
    console.log('   ✅ SAST (静态应用安全测试)');
    console.log('   ✅ 依赖项漏洞扫描');
    console.log('   ✅ DAST (动态应用安全测试)');
    console.log('   ✅ 综合安全评分');
    console.log('   ✅ 自动修复建议');
    console.log('   ✅ 合规性检查');
    console.log('   ✅ CI/CD 集成支持');
    
  } catch (error) {
    console.error('❌ 演示失败:', error);
    process.exit(1);
  }
}

// 运行演示
if (require.main === module) {
  runVulnerabilityScanDemo();
}

module.exports = { VulnerabilityScanDemo };