name: SecureFrontEnd CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '22.x'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'securefrontend'

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm audit --audit-level=moderate

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npm run format:check

    - name: Run security audit
      run: npm run security:audit

    - name: Run unit tests
      run: npm run test:unit

    - name: Generate test coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 构建和测试
  build-and-test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        environment: [development, staging, production]
    
    name: Build & Test (${{ matrix.environment }})
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create environment file
      run: |
        cp .env.${{ matrix.environment }}.example .env.${{ matrix.environment }}
        echo "NODE_ENV=${{ matrix.environment }}" >> .env.${{ matrix.environment }}

    - name: Run environment verification
      run: |
        chmod +x scripts/deploy/environment-verification.sh
        ./scripts/deploy/environment-verification.sh -e ${{ matrix.environment }} -v

    - name: Build application
      run: npm run build:${{ matrix.environment }}

    - name: Run integration tests
      run: npm run test:integration

    - name: Run performance tests
      if: matrix.environment == 'production'
      run: npm run test:performance

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.environment }}
        path: |
          dist/
          build/
          !dist/**/*.map
        retention-days: 7

  # Docker构建
  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    
    name: Docker Build & Push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    name: Security Vulnerability Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run container security scan
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/tmp aquasec/trivy image \
          --exit-code 1 --severity HIGH,CRITICAL \
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # 部署到Staging环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    name: Deploy to Staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup deployment environment
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to staging server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /opt/securefrontend
          
          # 备份当前版本
          docker-compose -f docker-compose.staging.yml down
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:staging \
                     ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:staging-backup || true
          
          # 拉取新镜像
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:staging
          
          # 更新配置
          git pull origin staging
          
          # 启动新版本
          docker-compose -f docker-compose.staging.yml up -d
          
          # 健康检查
          sleep 30
          curl -f http://localhost:3000/health || exit 1
        EOF

    - name: Run post-deployment tests
      run: |
        npm run test:e2e:staging

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 部署到Production环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    name: Deploy to Production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup deployment environment
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to production server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/securefrontend
          
          # 创建部署备份
          ./scripts/deploy/backup-deployment.sh
          
          # 蓝绿部署策略
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d --no-deps app
          
          # 健康检查和流量切换
          sleep 60
          ./scripts/deploy/health-check.sh
          ./scripts/deploy/switch-traffic.sh
          
          # 清理旧版本
          docker image prune -f
        EOF

    - name: Run production smoke tests
      run: |
        npm run test:smoke:production

    - name: Update monitoring dashboards
      run: |
        curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/annotations" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "text": "Production deployment completed - ${{ github.sha }}",
            "tags": ["deployment", "production"],
            "time": '$(($(date +%s) * 1000))'
          }'

    - name: Notify production deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # 部署后监控
  post-deployment-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    name: Post-Deployment Monitoring
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup monitoring
      run: |
        # 启动监控脚本
        node scripts/runners/run-advanced-monitoring.js --duration=300 --environment=${{ github.ref_name }}

    - name: Performance baseline check
      run: |
        npm run test:performance:baseline

    - name: Generate deployment report
      run: |
        node scripts/deploy/generate-deployment-report.js \
          --version=${{ github.sha }} \
          --environment=${{ github.ref_name }} \
          --output=deployment-report.json

    - name: Archive deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report-${{ github.sha }}
        path: deployment-report.json
        retention-days: 30