version: '3.8'

services:
  app1:
    build:
      context: ../..
      dockerfile: config/docker/Dockerfile
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      - postgres-master
      - redis-master
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
    ports:
      - "3020:3000"

  app2:
    build:
      context: ../..
      dockerfile: config/docker/Dockerfile
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      - postgres-slave
      - redis-slave
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
    ports:
      - "3021:3000"

  redis-master:
    image: ${REDIS_IMAGE:-redis}:${REDIS_TAG_PROD:-7.4.6-alpine}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_master_data:/data
    ports:
      - "6390:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-}

  redis-slave:
    image: ${REDIS_IMAGE:-redis}:${REDIS_TAG_PROD:-7.4.6-alpine}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_MASTER_HOST=redis-master
    volumes:
      - redis_slave_data:/data
    depends_on:
      - redis-master
    ports:
      - "6391:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-} --slaveof redis-master 6379

  postgres-master:
    image: ${POSTGRES_IMAGE:-postgres}:${POSTGRES_TAG_PROD:-15.13-alpine}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-secure_frontend}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER:-replicator}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
    ports:
      - "5440:5432"

  postgres-slave:
    image: ${POSTGRES_IMAGE:-postgres}:${POSTGRES_TAG_PROD:-15.13-alpine}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-secure_frontend}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MASTER_HOST=postgres-master
      - POSTGRES_REPLICATION_USER=${POSTGRES_REPLICATION_USER:-replicator}
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_slave_data:/var/lib/postgresql/data
    depends_on:
      - postgres-master
    ports:
      - "5441:5432"

  nginx:
    image: ${NGINX_IMAGE:-nginx}:${NGINX_TAG_PROD:-1.28.0-alpine}
    ports:
      - "8090:80"
      - "4443:443"

  prometheus:
    image: ${PROM_IMAGE:-prom/prometheus}:${PROM_TAG_PROD:-v3.7.1}
    ports:
      - "9100:9090"

  grafana:
    image: ${GRAFANA_IMAGE:-grafana/grafana}:${GRAFANA_TAG_PROD:-12.2.1}
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
    ports:
      - "3022:3000"

  alertmanager:
    image: ${ALERTMANAGER_IMAGE:-prom/alertmanager}:${ALERTMANAGER_TAG_PROD:-v0.28.1}
    ports:
      - "9093:9093"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-8.19.5}
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "9200:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION:-8.19.5}
    ports:
      - "5601:5601"

volumes:
  postgres_master_data:
    driver: local
  postgres_slave_data:
    driver: local
  redis_master_data:
    driver: local
  redis_slave_data:
    driver: local