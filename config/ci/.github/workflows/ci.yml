name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '22.12.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint-and-test:
    name: 代码检查和测试
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 代码格式检查
      run: npm run lint
      
    - name: 类型检查
      run: npm run type-check
      if: always()
      
    - name: 运行单元测试
      run: npm run test:unit
      
    - name: 运行集成测试
      run: npm run test:integration
      env:
        NODE_ENV: test
        
    - name: 生成测试覆盖率报告
      run: npm run test:coverage
      
    - name: 上传覆盖率报告到Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: 安全漏洞扫描
      run: npm audit --audit-level moderate

  # 构建和加密
  build-and-encrypt:
    name: 构建和加密
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        example: [vue-app, react-app]
        
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 构建示例应用
      run: |
        cd examples/${{ matrix.example }}
        npm ci
        npm run build
        
    - name: 加密构建产物
      run: |
        cd examples/${{ matrix.example }}
        npm run encrypt
      env:
        MASTER_KEY: ${{ secrets.MASTER_KEY }}
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: encrypted-${{ matrix.example }}-${{ github.sha }}
        path: examples/${{ matrix.example }}/encrypted/
        retention-days: 30

  # 端到端测试
  e2e-test:
    name: 端到端测试
    runs-on: ubuntu-latest
    needs: build-and-encrypt
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: secure_frontend_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 安装依赖
      run: npm ci
      
    - name: 下载构建产物
      uses: actions/download-artifact@v4
      with:
        pattern: encrypted-*-${{ github.sha }}
        path: ./artifacts/
        
    - name: 启动后端服务
      run: |
        npm run serve &
        sleep 10
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/secure_frontend_test
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        MASTER_KEY: ${{ secrets.MASTER_KEY }}
        
    - name: 运行端到端测试
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:3000
        
    - name: 上传测试截图
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-screenshots-${{ github.sha }}
        path: tests/e2e/screenshots/

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 上传Trivy扫描结果到GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 运行CodeQL分析
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript

  # Docker镜像构建
  build-docker:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 构建并推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: [build-and-encrypt, e2e-test, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到Kubernetes
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          k8s/staging/deployment.yaml
          k8s/staging/service.yaml
          k8s/staging/ingress.yaml
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: 等待部署完成
      run: |
        kubectl rollout status deployment/secure-frontend-staging -n staging --timeout=300s
        
    - name: 运行冒烟测试
      run: |
        sleep 30
        curl -f https://staging.secure-frontend.com/health || exit 1

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 部署到Kubernetes
      uses: azure/k8s-deploy@v1
      with:
        manifests: |
          k8s/production/deployment.yaml
          k8s/production/service.yaml
          k8s/production/ingress.yaml
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        
    - name: 等待部署完成
      run: |
        kubectl rollout status deployment/secure-frontend -n production --timeout=600s
        
    - name: 运行生产环境健康检查
      run: |
        sleep 60
        curl -f https://secure-frontend.com/health || exit 1
        
    - name: 通知部署成功
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 SecureFrontEnd ${{ github.ref_name }} 已成功部署到生产环境'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 性能测试
  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: 运行负载测试
      run: |
        npm install -g artillery
        artillery run tests/performance/load-test.yml
        
    - name: 上传性能报告
      uses: actions/upload-artifact@v4
      with:
        name: performance-report-${{ github.sha }}
        path: |
          lighthouse-report.html
          artillery-report.json

  # 清理
  cleanup:
    name: 清理资源
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    
    steps:
    - name: 清理旧的构建产物
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const oldArtifacts = artifacts.artifacts
            .filter(artifact => {
              const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
              return ageInDays > 7;
            });
            
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id
            });
            console.log(`Deleted artifact: ${artifact.name}`);
          }