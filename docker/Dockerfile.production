# 多阶段构建的生产环境Dockerfile
# 基于Linux Alpine镜像，优化安全性和体积

# 构建阶段
FROM node:22-alpine AS builder

# 设置构建参数
ARG NODE_ENV=production
ARG BUILD_DATE
ARG VCS_REF

# 添加标签信息
LABEL maintainer="SecureFrontEnd Team" \
      org.opencontainers.image.title="SecureFrontEnd" \
      org.opencontainers.image.description="Secure Frontend Application" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.source="https://github.com/your-org/securefrontend"

# 安装构建依赖
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    && ln -sf python3 /usr/bin/python

# 创建应用目录
WORKDIR /app

# 复制package文件
COPY package*.json ./

# 安装依赖（仅生产依赖）
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force

# 复制源代码
COPY . .

# 构建应用
RUN npm run build:production

# 运行阶段
FROM node:22-alpine AS runtime

# 创建非root用户
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nextjs -u 1001

# 安装运行时依赖
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# 设置工作目录
WORKDIR /app

# 复制构建产物
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nextjs:nodejs /app/config ./config

# 创建必要的目录
RUN mkdir -p /app/logs /app/temp /app/uploads \
    && chown -R nextjs:nodejs /app/logs /app/temp /app/uploads \
    && chmod 755 /app/logs /app/temp /app/uploads

# 复制启动脚本
COPY --chown=nextjs:nodejs docker/entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/entrypoint.sh

# 设置环境变量
ENV NODE_ENV=production \
    PORT=3000 \
    HOST=0.0.0.0 \
    LOG_LEVEL=info \
    HEALTHCHECK_TIMEOUT=30s

# 切换到非root用户
USER nextjs

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# 使用dumb-init作为PID 1
ENTRYPOINT ["dumb-init", "--"]

# 启动应用
CMD ["/usr/local/bin/entrypoint.sh"]